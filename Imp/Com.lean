import Imp.State
import Imp.Aexp
import Imp.Bexp
import Imp.Syntax 

-- Semantics of commands.
inductive ‚ÑÇ.ev‚Çí: ‚ÑÇ ‚Üí Œ£ ‚Üí Œ£ ‚Üí Prop 
  | skip‚Çí (œÉ: Œ£):
    ev‚Çí ‚¶Énop‚¶Ñ œÉ œÉ

  | ass‚Çí (x: String) (a: ùî∏) (œÉ: Œ£):
    ev‚Çí ‚¶É.x = .a‚¶Ñ œÉ (State.update œÉ x ‚ü™a, œÉ‚ü´)

  | seq‚Çí (œÉ œÉ‚ÇÅ œÉ‚ÇÇ: Œ£) (c‚ÇÅ c‚ÇÇ: ‚ÑÇ)
    (hc‚ÇÅ: ev‚Çí c‚ÇÅ œÉ œÉ‚ÇÇ) (hc‚ÇÇ: ev‚Çí c‚ÇÇ œÉ‚ÇÇ œÉ‚ÇÅ):
    ev‚Çí ‚¶É.c‚ÇÅ;.c‚ÇÇ‚¶Ñ œÉ œÉ‚ÇÅ

  | if_tt‚Çí (œÉ œÉ‚ÇÅ: Œ£) (b: ùîπ) (c‚ÇÅ c‚ÇÇ: ‚ÑÇ)
    (hb: ‚ü™b, œÉ‚ü´ = true) (hc‚ÇÅ: ev‚Çí c‚ÇÅ œÉ œÉ‚ÇÅ):
    ev‚Çí ‚¶Éif .b {.c‚ÇÅ} else {.c‚ÇÇ}‚¶Ñ œÉ œÉ‚ÇÅ

  | if_ff‚Çí (œÉ œÉ‚ÇÅ: Œ£) (b: ùîπ) (c‚ÇÅ c‚ÇÇ: ‚ÑÇ)
    (hb: ‚ü™b, œÉ‚ü´ = false) (hc‚ÇÇ: ev‚Çí c‚ÇÇ œÉ œÉ‚ÇÅ):
    ev‚Çí ‚¶Éif .b {.c‚ÇÅ} else {.c‚ÇÇ}‚¶Ñ œÉ œÉ‚ÇÅ

  | while_tt‚Çí (œÉ œÉ‚ÇÅ œÉ‚ÇÇ: Œ£) (b: ùîπ) (c: ‚ÑÇ)
    (hb: ‚ü™b, œÉ‚ü´ = true) (hc: ev‚Çí c œÉ œÉ‚ÇÇ) (hW: ev‚Çí ‚¶Éwhile .b {.c}‚¶Ñ œÉ‚ÇÇ œÉ‚ÇÅ):
    ev‚Çí ‚¶Éwhile .b {.c}‚¶Ñ œÉ œÉ‚ÇÅ

  | while_ff‚Çí (œÉ: Œ£) (b: ùîπ) (c: ‚ÑÇ)
    (hb: ‚ü™b, œÉ‚ü´ = false):
    ev‚Çí ‚¶Éwhile .b {.c}‚¶Ñ œÉ œÉ

notation "‚ü®" c "," œÉ "‚ü©" " ‚Üí " œÉ‚ÇÅ => ‚ÑÇ.ev‚Çí c œÉ œÉ‚ÇÅ

example: ‚ü®‚¶Éx = 5‚¶Ñ,‚ü¶‚üß‚ü© ‚Üí ‚ü¶x‚Ü¶5‚üß := by apply ‚ÑÇ.ev‚Çí.ass‚Çí

example:
  ‚ü®‚¶É
    x = 2;
    if x <= 1 {
      y = 3
    } else {
      z = 4
    }
    ‚¶Ñ, ‚ü¶‚üß
  ‚ü© ‚Üí
  ‚ü¶x‚Ü¶2, z‚Ü¶4‚üß := 
  by 
    apply ‚ÑÇ.ev‚Çí.seq‚Çí
    case hc‚ÇÅ => apply ‚ÑÇ.ev‚Çí.ass‚Çí
    case hc‚ÇÇ =>
      apply ‚ÑÇ.ev‚Çí.if_ff‚Çí
      case hb => rfl
      case hc‚ÇÇ => apply ‚ÑÇ.ev‚Çí.ass‚Çí

def ‚ÑÇ.sim (c‚ÇÅ c‚ÇÇ: ‚ÑÇ):=
  ‚àÄ (œÉ œÉ‚ÇÅ: Œ£), (‚ü®c‚ÇÅ, œÉ‚ü© ‚Üí œÉ‚ÇÅ) ‚Üî (‚ü®c‚ÇÇ, œÉ‚ü© ‚Üí œÉ‚ÇÅ) 

notation e‚ÇÅ " ‚àº " e‚ÇÇ => ‚ÑÇ.sim e‚ÇÅ e‚ÇÇ

theorem ‚ÑÇ.skipl (c: ‚ÑÇ): ‚¶Énop;.c‚¶Ñ ‚àº c := by
    unfold sim
    intro œÉ œÉ‚ÇÅ
    apply Iff.intro
    . {
      intro h
      cases h with | seq‚Çí _ _ _ _ _ hc‚ÇÅ _ => cases hc‚ÇÅ; assumption
    }
    . {
      intro h
      apply ev‚Çí.seq‚Çí
      . apply ev‚Çí.skip‚Çí
      . assumption
    }

theorem ‚ÑÇ.skipr (c: ‚ÑÇ): ‚¶É.c;nop‚¶Ñ ‚àº c := by
    unfold sim
    intro œÉ œÉ‚ÇÅ
    apply Iff.intro
    . {
      intro h
      cases h with | seq‚Çí _ _ _ _ _ _ hc‚ÇÇ => cases hc‚ÇÇ; assumption
    }
    . {
      intro h
      apply ev‚Çí.seq‚Çí
      . assumption
      . apply ev‚Çí.skip‚Çí
    }

theorem ‚ÑÇ.if_true (b: ùîπ) (c‚ÇÅ c‚ÇÇ: ‚ÑÇ) (h: b ‚àº ‚¶Étt‚¶Ñ):
  ‚¶Éif .b {.c‚ÇÅ} else {.c‚ÇÇ}‚¶Ñ ‚àº c‚ÇÅ :=
  by
    unfold sim
    intro œÉ‚ÇÅ œÉ‚ÇÇ
    apply Iff.intro
    . {
      intro h‚ÇÅ
      unfold ùîπ.sim at h
      cases h‚ÇÅ with
      | if_tt‚Çí => assumption
      | if_ff‚Çí _ _ _ _ _ hb => {
        specialize h œÉ‚ÇÅ
        simp at h
        rw [hb] at h
        contradiction
      }
    }
    . {
      intro h‚ÇÅ
      unfold ùîπ.sim at h
      apply ev‚Çí.if_tt‚Çí
      . {
        specialize h œÉ‚ÇÅ
        simp at h
        assumption
      }
      . assumption
    }

theorem ‚ÑÇ.if_false (b: ùîπ) (c‚ÇÅ c‚ÇÇ: ‚ÑÇ) (h: b ‚àº ‚¶Éff‚¶Ñ):
  ‚¶Éif .b {.c‚ÇÅ} else {.c‚ÇÇ}‚¶Ñ ‚àº c‚ÇÇ :=
  by
    unfold sim
    intro œÉ‚ÇÅ œÉ‚ÇÇ
    apply Iff.intro
    . {
      intro h‚ÇÅ
      unfold ùîπ.sim at h
      cases h‚ÇÅ with
      | if_ff‚Çí => assumption
      | if_tt‚Çí _ _ _ _ _ hb => {
        specialize h œÉ‚ÇÅ
        simp at h
        rw [hb] at h
        contradiction
      }
    }
    . {
      intro h‚ÇÅ
      unfold ùîπ.sim at h
      apply ev‚Çí.if_ff‚Çí
      . {
        specialize h œÉ‚ÇÅ
        simp at h
        assumption
      }
      . assumption
    }



theorem ‚ÑÇ.while_true 
  (œÉ œÉ‚ÇÅ: Œ£) (c: ‚ÑÇ) (b: ùîπ) (heqb: b ‚àº ‚¶Étt‚¶Ñ):
  ¬¨(‚ü®‚¶Éwhile .b {.c}‚¶Ñ, œÉ‚ü© ‚Üí œÉ‚ÇÅ) :=
  by
    intro h
    generalize heqcw: ‚¶Éwhile .b {.c}‚¶Ñ = cw at h
    induction h with
    | skip‚Çí  => simp at heqcw
    | ass‚Çí   => simp at heqcw
    | seq‚Çí   => simp at heqcw
    | if_tt‚Çí => simp at heqcw
    | if_ff‚Çí => simp at heqcw
    | while_tt‚Çí _ _ _ _ _ _ _ _ _ ih‚ÇÇ => {
        simp at heqcw
        apply ih‚ÇÇ
        rw [‚Üêheqcw.left, ‚Üêheqcw.right]
      }
    | while_ff‚Çí œÉ _ _ hb => {
        simp at heqcw
        unfold ùîπ.sim at heqb
        specialize heqb œÉ
        simp at heqb
        rw [‚Üêheqcw.left, heqb] at hb
        simp at hb
      }

#print axioms ‚ÑÇ.while_true

theorem ‚ÑÇ.ev‚Çí_determ (c: ‚ÑÇ) (œÉ œÉ‚ÇÅ œÉ‚ÇÅ': Œ£)
  (h‚ÇÅ: ‚ü®c, œÉ‚ü© ‚Üí œÉ‚ÇÅ) (h‚ÇÇ: ‚ü®c, œÉ‚ü© ‚Üí œÉ‚ÇÅ') :
  œÉ‚ÇÅ = œÉ‚ÇÅ' := 
  by
    revert œÉ‚ÇÅ'
    induction h‚ÇÅ with
    | skip‚Çí => intro _ h; cases h; rfl
    | ass‚Çí  => intro _ h; cases h; rfl
    | seq‚Çí _ _ œÉ‚ÇÇ _ _ _ _ ih‚ÇÅ ih‚ÇÇ => {
        intro _ h
        apply ih‚ÇÇ
        cases h with
        | seq‚Çí _ _ œÉ‚ÇÇ' _ _ hc‚ÇÅ hc‚ÇÇ => {
            suffices hi : œÉ‚ÇÇ = œÉ‚ÇÇ' by rw [‚Üêhi] at hc‚ÇÇ; apply hc‚ÇÇ
            apply ih‚ÇÅ
            assumption
          }
      }
    | if_tt‚Çí _ _ _ _ _ hb _ ih => {
        intro _ h
        apply ih
        cases h with
        | if_tt‚Çí => assumption
        | if_ff‚Çí _ _ _ _ _ hb‚ÇÅ => {
          rw [hb] at hb‚ÇÅ
          contradiction
        }
      }
    | if_ff‚Çí _ _ _ _ _ hb _ ih => {
        intro _ h
        apply ih
        cases h with
        | if_tt‚Çí _ _ _ _ _ hb‚ÇÅ => {
          rw [hb] at hb‚ÇÅ
          contradiction
        }
        | if_ff‚Çí _ _ _ _ _ hb‚ÇÅ => assumption
      }
    | while_tt‚Çí _ _ œÉ‚ÇÇ _ _ hb _ _ ih‚ÇÅ ih => {
        intro _ h
        apply ih
        cases h with
        | while_tt‚Çí  _ _ œÉ‚ÇÉ _ _ _ _ hW‚ÇÅ => {
          suffices hi: œÉ‚ÇÇ = œÉ‚ÇÉ by rw [‚Üêhi] at hW‚ÇÅ; apply hW‚ÇÅ
          apply ih‚ÇÅ
          assumption
        }
        | while_ff‚Çí _ _ _ hb‚ÇÅ => {
          rw [hb] at hb‚ÇÅ
          contradiction
        }
      }
    | while_ff‚Çí _ _ _ hb => {
        intro _ h
        cases h with
        | while_ff‚Çí => rfl
        | while_tt‚Çí _ _ _ _ _ hb‚ÇÅ => {
          rw [hb] at hb‚ÇÅ
          contradiction
        }
      }
    
#print axioms ‚ÑÇ.ev‚Çí_determ

