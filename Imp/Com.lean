import Imp.State
import Imp.Aexp
import Imp.Bexp
import Imp.Syntax

-- Semantics of commands.
inductive ‚ÑÇ.Œµ: ‚ÑÇ ‚Üí ùïä ‚Üí ùïä ‚Üí Prop
  | skip:
    Œµ ‚¶Éskip‚¶Ñ s s

  | ass:
    Œµ ‚¶Éx ‚âî a‚¶Ñ s (ùïä.update s x (ùî∏.œÅ a s))

  | seq s‚ÇÇ (hc‚ÇÅ: Œµ c‚ÇÅ s s‚ÇÇ) (hc‚ÇÇ: Œµ c‚ÇÇ s‚ÇÇ s‚ÇÅ):
    Œµ ‚¶Éc‚ÇÅ;c‚ÇÇ‚¶Ñ s s‚ÇÅ

  | if_tt (hb: ùîπ.œÅ b s = true) (hc‚ÇÅ: Œµ c‚ÇÅ s s‚ÇÅ):
    Œµ ‚¶Éif b {c‚ÇÅ} else {c‚ÇÇ}‚¶Ñ s s‚ÇÅ

  | if_ff (hb: ùîπ.œÅ b s = false) (hc‚ÇÇ: Œµ c‚ÇÇ s s‚ÇÇ):
    Œµ ‚¶Éif b {c‚ÇÅ} else {c‚ÇÇ}‚¶Ñ s s‚ÇÇ

  | while_tt s‚ÇÇ (hb: ùîπ.œÅ b s = true) (hc: Œµ c s s‚ÇÇ) (hw: Œµ ‚¶Éwhile b {c}‚¶Ñ s‚ÇÇ s‚ÇÅ):
    Œµ ‚¶Éwhile b {c}‚¶Ñ s s‚ÇÅ

  | while_ff (hb: ùîπ.œÅ b s = false):
    Œµ ‚¶Éwhile b {c}‚¶Ñ s s

example: ‚ÑÇ.Œµ ‚ü™x ‚âî 5‚ü´ ‚ü¶‚üß ‚ü¶x‚Ü¶5‚üß := by constructor

example:
  ‚ÑÇ.Œµ ‚ü™
    x ‚âî 2;
    if x ‚â§ 1 {
      y ‚âî 3
    } else {
      z ‚âî 4
    }‚ü´
  ‚ü¶‚üß
  ‚ü¶x‚Ü¶2, z‚Ü¶4‚üß :=
  by
    constructor
    . constructor
    . apply ‚ÑÇ.Œµ.if_ff
      . rfl
      . constructor

def ‚ÑÇ.sim c‚ÇÅ c‚ÇÇ := ‚àÄ s s‚ÇÅ, (Œµ c‚ÇÅ s s‚ÇÅ) ‚Üî (Œµ c‚ÇÇ s s‚ÇÅ)

theorem ‚ÑÇ.skipl: sim ‚¶Éskip;c‚¶Ñ c := by
    unfold sim
    intro _ _
    constructor
    . intro h
      cases h with | seq _ hc‚ÇÅ _ => cases hc‚ÇÅ; assumption
    . intro h
      constructor
      . constructor
      . assumption

theorem ‚ÑÇ.skipr: sim ‚¶Éc;skip‚¶Ñ c := by
    unfold sim
    intro _ _
    constructor
    . intro h
      cases h with | seq _ _ hc‚ÇÇ => cases hc‚ÇÇ; assumption
    . intro h
      constructor
      . assumption
      . constructor

theorem ‚ÑÇ.if_true (h: ùîπ.sim b ‚¶Étt‚¶Ñ):
  sim ‚¶Éif b {c‚ÇÅ} else {c‚ÇÇ}‚¶Ñ c‚ÇÅ :=
  by
    unfold sim
    intro s‚ÇÅ _
    constructor
    . intro h‚ÇÅ
      cases h‚ÇÅ with
      | if_tt => assumption
      | if_ff hb => {
        specialize h s‚ÇÅ
        simp at h
        rw [hb] at h
        contradiction
      }
    . intro h‚ÇÅ
      apply Œµ.if_tt
      . specialize h s‚ÇÅ
        simp at h
        assumption
      . assumption

theorem ‚ÑÇ.if_false (h: ùîπ.sim b ‚¶Éff‚¶Ñ):
  sim ‚¶Éif b {c‚ÇÅ} else {c‚ÇÇ}‚¶Ñ c‚ÇÇ :=
  by
    unfold sim
    intro s‚ÇÅ s‚ÇÇ
    apply Iff.intro
    . intro h‚ÇÅ
      unfold ùîπ.sim at h
      cases h‚ÇÅ with
      | if_ff => assumption
      | if_tt hb => {
        specialize h s‚ÇÅ
        simp at h
        rw [hb] at h
        contradiction
      }
    . intro h‚ÇÅ
      unfold ùîπ.sim at h
      apply Œµ.if_ff
      . specialize h s‚ÇÅ
        simp at h
        assumption
      . assumption

theorem ‚ÑÇ.while_true (heqb: ùîπ.sim b ‚¶Étt‚¶Ñ):
  ¬¨(Œµ ‚¶Éwhile b {c}‚¶Ñ s s‚ÇÅ) :=
  by
    intro h
    generalize heqcw: ‚¶Éwhile b {c}‚¶Ñ = cw at h
    induction h with
    | skip  => simp at heqcw
    | ass   => simp at heqcw
    | seq   => simp at heqcw
    | if_tt => simp at heqcw
    | if_ff => simp at heqcw
    | while_tt _ _ _ _ _ ih‚ÇÇ => {
        simp at heqcw
        apply ih‚ÇÇ
        rw [‚Üêheqcw.left, ‚Üêheqcw.right]
      }
    | while_ff hb => {
        simp at heqcw
        unfold ùîπ.sim at heqb
        simp at heqb
        rw [‚Üêheqcw.left, heqb] at hb
        simp at hb
      }

#print axioms ‚ÑÇ.while_true

theorem ‚ÑÇ.Œµ_determ (h‚ÇÅ: Œµ c s s‚ÇÅ) (h‚ÇÇ: Œµ c s s‚ÇÅ'):
  s‚ÇÅ = s‚ÇÅ' :=
  by
    revert s‚ÇÅ'
    induction h‚ÇÅ with
    | skip => intro _ h; cases h; rfl
    | ass  => intro _ h; cases h; rfl
    | seq s‚ÇÇ _ _ ih‚ÇÅ ih‚ÇÇ => {
        intro _ h
        apply ih‚ÇÇ
        cases h with
        | seq s‚ÇÇ' hc‚ÇÅ hc‚ÇÇ => {
            suffices hi : s‚ÇÇ = s‚ÇÇ' by rw [‚Üêhi] at hc‚ÇÇ; apply hc‚ÇÇ
            apply ih‚ÇÅ
            assumption
          }
      }
    | if_tt hb _ ih => {
        intro _ h
        apply ih
        cases h with
        | if_tt => assumption
        | if_ff hb‚ÇÅ => {
          rw [hb] at hb‚ÇÅ
          contradiction
        }
      }
    | if_ff hb _ ih => {
        intro _ h
        apply ih
        cases h with
        | if_tt hb‚ÇÅ => {
          rw [hb] at hb‚ÇÅ
          contradiction
        }
        | if_ff hb‚ÇÅ => assumption
      }
    | while_tt s‚ÇÇ hb _ _ ih‚ÇÅ ih => {
        intro _ h
        apply ih
        cases h with
        | while_tt s‚ÇÉ _ _ hW‚ÇÅ => {
          suffices hi: s‚ÇÇ = s‚ÇÉ by rw [‚Üêhi] at hW‚ÇÅ; apply hW‚ÇÅ
          apply ih‚ÇÅ
          assumption
        }
        | while_ff hb‚ÇÅ => {
          rw [hb] at hb‚ÇÅ
          contradiction
        }
      }
    | while_ff hb => {
        intro _ h
        cases h with
        | while_ff => rfl
        | while_tt _ hb‚ÇÅ => {
          rw [hb] at hb‚ÇÅ
          contradiction
        }
      }

#print axioms ‚ÑÇ.Œµ_determ
