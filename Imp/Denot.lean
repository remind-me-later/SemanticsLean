import Imp.State
import Imp.Aexp
import Imp.Bexp
import Imp.Syntax
import Imp.BigStep

import Mathlib.Control.Fix
import Mathlib.Control.LawfulFix
import Mathlib.Order.OmegaCompletePartialOrder
import Mathlib.Data.PFun
import Mathlib.Data.Part

instance: PartialOrder (ùïä ‚Üí. ùïä) where
  le a b := ‚àÄs s‚ÇÅ, a s = s‚ÇÅ ‚Üí b s = s‚ÇÅ
  le_refl := by simp
  le_trans := by {
    intro a b c h‚ÇÅ h‚ÇÇ s s‚ÇÅ h
    simp at *
    specialize h‚ÇÅ s
    specialize h‚ÇÇ s
    rw [h‚ÇÇ, h‚ÇÅ]
    assumption
  }
  le_antisymm := by {
    intro a b h‚ÇÅ h‚ÇÇ
    simp at *
    apply funext
    intro s
    specialize h‚ÇÅ s
    specialize h‚ÇÇ s
    rw [h‚ÇÇ, h‚ÇÅ]
  }

instance (c: OmegaCompletePartialOrder.Chain (ùïä ‚Üí. ùïä)): Decidable (‚àÉ s‚ÇÅ f, f ‚àà c ‚àß f s = Part.some s‚ÇÅ) := sorry

noncomputable def œÅ_œâSup (c: OmegaCompletePartialOrder.Chain (ùïä ‚Üí. ùïä)) : (ùïä ‚Üí. ùïä) :=
  fun s => if h: ‚àÉs‚ÇÅ: ùïä, ‚àÉ f ‚àà c, f s = Part.some s‚ÇÅ then Part.some (Classical.choose h) else Part.none

theorem œÅ_œâSup_eq_some {c : OmegaCompletePartialOrder.Chain (ùïä ‚Üí. ùïä)} (h : ‚àÉ f ‚àà c, f s = Part.some s‚ÇÅ) : œÅ_œâSup c = f := sorry

noncomputable instance: OmegaCompletePartialOrder (ùïä ‚Üí. ùïä) where
  œâSup := œÅ_œâSup
  le_œâSup := by {
    intro c i s s‚ÇÅ h
    unfold œÅ_œâSup
    sorry
  }
  œâSup_le := by {
    intro c x h s s‚ÇÅ h‚ÇÅ
    sorry
  }

def Œì (b: Bool) (f: ùïä ‚Üí. ùïä): (ùïä ‚Üí. ùïä) ‚ÜíùíÑ (ùïä ‚Üí. ùïä) :=
  {
    toFun := fun g s => ite b (f s >>= g) s
    monotone' := by sorry
    cont := by {
      unfold OmegaCompletePartialOrder.Continuous
      simp
      sorry
    }
  }

@[simp, reducible] def ‚ÑÇ.œÅ (c: ‚ÑÇ) (s: ùïä): Part ùïä :=
  match c with
  | skip   => s
  | x ‚âî‚Çõ a => ùïä.update s x (ùî∏.œÅ a s)
  | c‚ÇÅ;‚Çõc‚ÇÇ => œÅ c‚ÇÅ s >>= œÅ c‚ÇÇ
  | ife b c‚ÇÅ c‚ÇÇ => ite (ùîπ.œÅ b s) (œÅ c‚ÇÅ s) (œÅ c‚ÇÇ s)
  | wle b c => Part.fix (Œì (ùîπ.œÅ b s) (œÅ c)) s

#simp ‚ÑÇ.œÅ ‚ü™x ‚âî 2; if x ‚â§ 1 {y ‚âî 3} else {z ‚âî 4}‚ü´ ‚ü¶‚üß

def ‚ÑÇ.œÅ_eq c‚ÇÅ c‚ÇÇ := ‚àÄ s, œÅ c‚ÇÅ s = œÅ c‚ÇÇ s

instance: Setoid ‚ÑÇ where
  r := ‚ÑÇ.œÅ_eq
  iseqv := {
    refl := by {
      unfold ‚ÑÇ.œÅ_eq
      simp
    }
    symm := by {
      intro _ _ h _
      apply Eq.symm
      apply h
    }
    trans := by {
      intro _ _ _ h‚ÇÅ h‚ÇÇ x
      specialize h‚ÇÅ x
      specialize h‚ÇÇ x
      rw [h‚ÇÅ, h‚ÇÇ]
    }
  }

theorem ‚ÑÇ.skipld: (skip;‚Çõc) ‚âà c := by intro s; simp

theorem ‚ÑÇ.skiprd: (c;‚Çõskip) ‚âà c := by intro s; simp

theorem ‚ÑÇ.if_trued (hb: b ‚âà ùîπ.tt):
  ife b c‚ÇÅ c‚ÇÇ ‚âà c‚ÇÅ :=
  by
    intro s
    simp
    rw [hb]
    simp

theorem ‚ÑÇ.if_falsed (hb: b ‚âà ùîπ.ff):
  ife b c‚ÇÅ c‚ÇÇ ‚âà c‚ÇÇ :=
  by
    intro s
    simp
    rw [hb]
    simp

theorem ‚ÑÇ.Œµ_iff_œÅ : Œµ c s s‚ÇÅ ‚Üî œÅ c s = Part.some s‚ÇÅ :=
  by
    constructor
    . {
      intro h
      induction h with
      | skip => simp
      | ass => simp
      | cat _ _ _ ih‚ÇÅ ih‚ÇÇ =>
        simp
        rw [ih‚ÇÅ]
        simp
        rw [ih‚ÇÇ]
      | ite_tt hb _ ih =>
        simp
        rw [hb, ih]
        simp
      | ite_ff hb _ ih =>
        simp
        rw [hb, ih]
        simp
      | wle_tt s‚ÇÇ hb _ _ ih‚ÇÅ ih‚ÇÇ =>
        simp at *
        rw [hb]
        unfold Œì at *
        simp at *
        sorry

      | wle_ff hb =>
        simp
        rw [hb, Part.fix_def]
        . unfold Part.Fix.approx; rfl
        . exists 1
    }
    . {
      intro h
      revert s s‚ÇÅ
      induction c with
      | skip => simp; intro _; constructor
      | ass => simp; intro _; constructor
      | cat c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
        intro s s‚ÇÅ h
        simp at h
        have s‚ÇÇ: ùïä := default
        have hh: (œÅ c‚ÇÅ s) = Part.some s‚ÇÇ := by {
          unfold Part.bind at h

        }
        rw [hh] at h
        simp at h
        constructor
        . apply ih‚ÇÅ
          assumption
        . apply ih‚ÇÇ
          assumption

      | ife b c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ => {
        intro s s‚ÇÅ h
        cases hh: ùîπ.œÅ b s
        . {
          apply ‚ÑÇ.Œµ.ite_ff
          . assumption
          . simp at h; rw [hh] at h; simp at h; apply ih‚ÇÇ; assumption
        }
        . {
          apply ‚ÑÇ.Œµ.ite_tt
          . assumption
          . simp at h; rw [hh] at h; simp at h; apply ih‚ÇÅ; assumption
        }
      }

      | wle b c ih => {
        intro s s‚ÇÅ h
        cases hh: ùîπ.œÅ b s
        . {
          simp at h
          rw [hh] at h
          unfold Œì at h
          simp at h
          rw [Part.fix_def] at h
          unfold Part.Fix.approx at h
          . {
            simp at h
            cases h
            apply ‚ÑÇ.Œµ.wle_ff
            assumption
          }
          . {
            exists 1
          }
        }
        . {
          sorry
        }
      }
    }
