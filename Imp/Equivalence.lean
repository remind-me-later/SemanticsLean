import Imp.Natural
import Imp.Structural


theorem ‚ÑÇ.œÑ_imp_Œµ (h: œÑ c s skip s‚ÇÅ): Œµ c s s‚ÇÅ :=
  by {
    revert s s‚ÇÅ
    induction c with
    | skip => {
      intro s s‚ÇÅ h
      cases h
      constructor
      rename_i h‚ÇÅ h‚ÇÇ
      cases h‚ÇÅ
    }
    | cat a b iha ihb => {
      intro s s‚ÇÅ h
      have hh := œÑ.catex h
      cases hh
      rename_i w hh
      cases hh
      apply Œµ.cat_Œµ w
      . apply iha
        assumption
      . apply ihb
        assumption
    }
    | ass x a => {
      intro s s‚ÇÅ h
      cases h
      rename_i h‚ÇÅ h‚ÇÇ
      cases h‚ÇÅ
      cases h‚ÇÇ
      . constructor
      . rename_i h‚ÇÅ h‚ÇÇ
        cases h‚ÇÅ
    }
    | ife b c d ihc ihd => {
      intro s s‚ÇÅ h
      cases h
      rename_i h‚ÇÅ h‚ÇÇ
      cases h‚ÇÅ
      . {
        apply Œµ.ife_tt_Œµ
        . assumption
        . apply ihc
          assumption
      }
      . {
        apply Œµ.ife_ff_Œµ
        . assumption
        . apply ihd
          assumption
      }
    }
    | wle b c =>
      intro s s‚ÇÅ h
      generalize hs: skip = ss at h
      generalize hw: wle b c = ww at h ‚ä¢
      induction h <;> cases hs <;> cases hw
      simp at *
      rename_i h‚ÇÅ h‚ÇÇ ih
      cases h‚ÇÇ
      rw [Œµ.wle_unfold]
      apply ih
      sorry
  }

theorem ‚ÑÇ.Œµ_imp_œÑ (h: Œµ c s s‚ÇÅ): œÑ c s skip s‚ÇÅ :=
  by {
    induction h with
    | skip_Œµ => constructor
    | ass_Œµ => apply œÑ.self; constructor
    | cat_Œµ t _ _ ihc ihd  => apply œÑ.cat t ihc ihd
    | ife_tt_Œµ hb _ ih =>
      rename_i c _  s _ _
      apply œÑ.step c s
      . apply Œ≥.ife_tt_Œ≥ hb
      . assumption
    | ife_ff_Œµ hb _ ih =>
      rename_i c d s _ _
      apply œÑ.step d s
      . apply Œ≥.ife_ff_Œ≥ hb
      . assumption
    | wle_tt_Œµ w hb _ _ ihc ihw => {
      rename_i b c d s _ _
      apply œÑ.step (ife b (c;;wle b c) skip) s
      . apply Œ≥.wle_Œ≥
      . apply œÑ.step (c;;wle b c) s
        . apply Œ≥.ife_tt_Œ≥ hb
        . apply œÑ.cat w ihc ihw
    }
    | wle_ff_Œµ => {
      rename_i b c s hb
      apply œÑ.step (ife b (c;;wle b c) skip) s
      . apply Œ≥.wle_Œ≥
      . apply œÑ.step skip s
        . apply Œ≥.ife_ff_Œ≥ hb
        . constructor
    }
  }

theorem  ‚ÑÇ.Œµ_iff_œÑ: Œµ c s s‚ÇÅ ‚Üî œÑ c s skip s‚ÇÅ := by
  constructor
  . apply Œµ_imp_œÑ
  . apply œÑ_imp_Œµ

-- theorem ‚ÑÇ.Œµ_iff_œÅ : Œµ c s s‚ÇÅ ‚Üî s‚ÇÅ ‚àà œÅ c s :=
--   by
--     constructor
--     . {
--       intro h
--       induction h with
--       | skip => simp
--       | ass => simp
--       | cat s‚ÇÇ _ _ ih‚ÇÅ ih‚ÇÇ => simp; exists s‚ÇÇ
--       | ife_tt hb _ ih =>
--         unfold œÅ
--         rw [hb]
--         assumption
--       | ife_ff hb _ ih =>
--         unfold œÅ
--         rw [hb]
--         assumption
--       | wle_tt s‚ÇÇ hb _ _ ih‚ÇÅ ih‚ÇÇ =>
--         rw [wle_unfoldd]
--         unfold œÅ
--         rw [hb]
--         simp
--         exists s‚ÇÇ
--       | wle_ff hb =>
--         rw [wle_unfoldd]
--         unfold œÅ
--         rw [hb]
--         simp
--     }
--     . {
--       intro h
--       revert s s‚ÇÅ
--       induction c with
--       | skip => simp; intro _; constructor
--       | ass => simp; intro _; constructor
--       | cat c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
--         intro s s‚ÇÅ h
--         simp at h
--         cases h with | intro s‚ÇÇ hh =>
--           constructor
--           . apply ih‚ÇÅ; apply hh.left
--           . apply ih‚ÇÇ; apply hh.right

--       | ife b c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
--         intro s s‚ÇÅ h
--         cases hh: ùîπ.œÅ b s
--         . apply ‚ÑÇ.Œµ.ife_ff
--           . assumption
--           . unfold œÅ at h; rw [hh] at h; simp at h; apply ih‚ÇÇ; assumption
--         . apply ‚ÑÇ.Œµ.ife_tt
--           . assumption
--           . unfold œÅ at h; rw [hh] at h; simp at h; apply ih‚ÇÅ; assumption

--       | wle b c ih => {
--         intro s s‚ÇÅ h
--         cases hb: ùîπ.œÅ b s
--         . rw [‚ÑÇ.wle_unfoldd] at h
--           unfold œÅ at h
--           rw [hb] at h
--           simp at h
--           rw [h]
--           apply ‚ÑÇ.Œµ.wle_ff
--           assumption
--         . {
--           rw [‚ÑÇ.wle_unfold, ‚ÑÇ.ife_unfold_ext]

--           unfold œÅ at h
--           rw [hb] at h
--           simp at h
--           cases h
--           rename_i s‚ÇÇ h

--         }
--       }
--     }
