import Imp.Natural
import Imp.Structural

theorem ‚ÑÇ.Œµ_imp_œÑ (h: Œµ c s s‚ÇÅ): œÑ (c, s) (skip, s‚ÇÅ) :=
  by {
    induction h with
    | skip‚ÇÅ => constructor
    | ass‚ÇÅ => apply Relation.ReflTransGen.single; constructor
    | cat‚ÇÅ _ _ ihc ihd  => apply œÑ.cat _ ihc ihd
    | ife‚ÇÅ hb _ ih =>
      rename_i c _  s _ _
      apply Relation.ReflTransGen.head
      . apply Œ≥.ife‚ÇÅ
        assumption
      . assumption
    | ife‚ÇÇ hb _ ih =>
      rename_i c d s _ _
      apply Relation.ReflTransGen.head
      . apply Œ≥.ife‚ÇÇ
        assumption
      . assumption
    | wle‚ÇÅ hb _ _ ihc ihw => {
      rename_i b c _ d s _ _
      apply Relation.ReflTransGen.head
      . apply Œ≥.wle‚ÇÅ
      . apply Relation.ReflTransGen.head
        . constructor
          assumption
        . apply œÑ.cat _ ihc ihw
    }
    | wle‚ÇÇ => {
      rename_i b c s hb
      apply Relation.ReflTransGen.head
      . apply Œ≥.wle‚ÇÅ
      . apply Relation.ReflTransGen.head
        . apply Œ≥.ife‚ÇÇ
          assumption
        . constructor
    }
  }

lemma ‚ÑÇ.Œµ_imp_Œ≥_imp_Œµ
  (h‚ÇÅ: Œ≥ (S‚ÇÄ, s‚ÇÄ) (S‚ÇÅ, s‚ÇÅ))
  (h‚ÇÇ: Œµ S‚ÇÅ s‚ÇÅ s‚ÇÇ):
  Œµ S‚ÇÄ s‚ÇÄ s‚ÇÇ :=
  by
  {
    generalize hs‚ÇÄ: (S‚ÇÄ, s‚ÇÄ) = ss‚ÇÄ at h‚ÇÅ
    generalize hs‚ÇÅ: (S‚ÇÅ, s‚ÇÅ) = ss‚ÇÅ at h‚ÇÅ
    induction' h‚ÇÅ generalizing S‚ÇÄ S‚ÇÅ s‚ÇÄ s‚ÇÅ <;> cases hs‚ÇÄ <;> cases hs‚ÇÅ <;> simp at *
    . cases h‚ÇÇ; constructor
    . constructor; constructor; assumption
    . {
      r

    }


  }





  -- simp [*, big_step_while_true_iff] {contextual := tt},
  -- case seq_step {
  --   intros u hS' hT,
  --   apply exists.intro u,
  --   exact and.intro (ih hS') hT }


theorem ‚ÑÇ.œÑ_imp_Œµ (h: œÑ (c, s) (skip, s‚ÇÅ)): Œµ c s s‚ÇÅ :=
  by {
    revert s s‚ÇÅ
    induction c with
    | skip => {
      intro s s‚ÇÅ h
      cases h
      constructor
      rename_i h‚ÇÅ h‚ÇÇ
      cases h‚ÇÅ
    }
    | cat a b iha ihb => {
      intro s s‚ÇÅ h
      have hh := œÑ.catex h
      cases hh
      rename_i w hh
      cases hh
      apply Œµ.cat‚ÇÅ
      . apply iha
        assumption
      . apply ihb
        assumption
    }
    | ass x a => {
      intro s s‚ÇÅ h
      cases h
      rename_i h‚ÇÅ h‚ÇÇ
      cases h‚ÇÅ
      cases h‚ÇÇ
      . constructor
      . rename_i h‚ÇÅ h‚ÇÇ
        cases h‚ÇÅ
    }
    | ife b c d ihc ihd => {
      intro s s‚ÇÅ h
      rw [Œµ.ife_ext]
      cases h
      rename_i h‚ÇÅ h‚ÇÇ
      cases h‚ÇÅ
      cases hb: b.œÅ s <;> (rw [hb] at h‚ÇÇ; simp at *)
      . apply ihd; assumption
      . apply ihc; assumption
    }
    | wle b c ih =>
      intro s s‚ÇÅ h
      rw [Œµ.wle_unfold, Œµ.ife_ext]
      cases h
      rename_i h‚ÇÅ h‚ÇÇ
      cases h‚ÇÅ
      cases hb: b.œÅ s <;> (rw [hb] at h‚ÇÇ; simp at *)
      . cases h‚ÇÇ; constructor; rename_i h‚ÇÅ h‚ÇÇ; cases h‚ÇÅ
      . {
        sorry
      }
  }

-- theorem  ‚ÑÇ.Œµ_iff_œÑ: Œµ c s s‚ÇÅ ‚Üî œÑ c s skip s‚ÇÅ := by
--   constructor
--   . apply Œµ_imp_œÑ
--   . apply œÑ_imp_Œµ

-- theorem ‚ÑÇ.Œµ_iff_œÅ : Œµ c s s‚ÇÅ ‚Üî s‚ÇÅ ‚àà œÅ c s :=
--   by
--     constructor
--     . {
--       intro h
--       induction h with
--       | skip => simp
--       | ass => simp
--       | cat s‚ÇÇ _ _ ih‚ÇÅ ih‚ÇÇ => simp; exists s‚ÇÇ
--       | ife_tt hb _ ih =>
--         unfold œÅ
--         rw [hb]
--         assumption
--       | ife_ff hb _ ih =>
--         unfold œÅ
--         rw [hb]
--         assumption
--       | wle_tt s‚ÇÇ hb _ _ ih‚ÇÅ ih‚ÇÇ =>
--         rw [wle_unfoldd]
--         unfold œÅ
--         rw [hb]
--         simp
--         exists s‚ÇÇ
--       | wle_ff hb =>
--         rw [wle_unfoldd]
--         unfold œÅ
--         rw [hb]
--         simp
--     }
--     . {
--       intro h
--       revert s s‚ÇÅ
--       induction c with
--       | skip => simp; intro _; constructor
--       | ass => simp; intro _; constructor
--       | cat c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
--         intro s s‚ÇÅ h
--         simp at h
--         cases h with | intro s‚ÇÇ hh =>
--           constructor
--           . apply ih‚ÇÅ; apply hh.left
--           . apply ih‚ÇÇ; apply hh.right

--       | ife b c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
--         intro s s‚ÇÅ h
--         cases hh: ùîπ.œÅ b s
--         . apply ‚ÑÇ.Œµ.ife_ff
--           . assumption
--           . unfold œÅ at h; rw [hh] at h; simp at h; apply ih‚ÇÇ; assumption
--         . apply ‚ÑÇ.Œµ.ife_tt
--           . assumption
--           . unfold œÅ at h; rw [hh] at h; simp at h; apply ih‚ÇÅ; assumption

--       | wle b c ih => {
--         intro s s‚ÇÅ h
--         cases hb: ùîπ.œÅ b s
--         . rw [‚ÑÇ.wle_unfoldd] at h
--           unfold œÅ at h
--           rw [hb] at h
--           simp at h
--           rw [h]
--           apply ‚ÑÇ.Œµ.wle_ff
--           assumption
--         . {
--           rw [‚ÑÇ.wle_unfold, ‚ÑÇ.ife_unfold_ext]

--           unfold œÅ at h
--           rw [hb] at h
--           simp at h
--           cases h
--           rename_i s‚ÇÇ h

--         }
--       }
--     }
