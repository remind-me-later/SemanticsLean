import Imp.Natural
import Imp.Structural


theorem ‚ÑÇ.Œ≥_imp_Œµ (h: Œ≥ (c, s, k) (skip, s‚ÇÅ, k‚ÇÅ)): Œµ c s s‚ÇÅ :=
  by {
    induction c with
    | skip => {
      cases h
      repeat constructor
    }
    | cat a b iha ihb => {
      cases h
      constructor
      . apply iha; assumption
      . constructor
    }
    | ass x a => {
      cases h
      constructor
    }
    | ife b c d ihc ihd => {
      cases h
      . {
        apply Œµ.ife_tt_Œµ
        . assumption
        . apply ihc
          assumption
      }
      . {
        apply Œµ.ife_ff_Œµ
        . assumption
        . apply ihd
          assumption
      }
    }
    | wle b c =>
      cases h
      rename_i h
      cases h
      . {
        rename_i ih hb h
        cases h
      }
      . {
        rename_i ih hb h
        cases h
        apply Œµ.wle_ff_Œµ; assumption
      }
  }

theorem ‚ÑÇ.Œµ_imp_Œ≥ (h: Œµ c s s‚ÇÅ): ‚àÉk, Œ≥ (c, s, k) (skip, s‚ÇÅ, 0) :=
  by {
    induction h with
    | skip_Œµ => exists 0; constructor
    | ass_Œµ => exists 1; constructor
    | cat_Œµ t _ _ ihc ihd  =>
      cases ihc
      rename_i kc ihc
      cases ihd
      rename_i kd ihd
      exists kc + kd
      apply Œ≥.cat_k_iff
      . assumption
      . assumption
    | ife_tt_Œµ hb _ ih =>
      cases ih
      rename_i k ih
      exists k
      apply Œ≥.ife_tt_Œ≥ <;> assumption
    | ife_ff_Œµ hb _ ih =>
      cases ih
      rename_i k ih
      exists k
      apply Œ≥.ife_ff_Œ≥ <;> assumption
    | wle_tt_Œµ w hb _ _ ihc ihw => {
      cases ihc
      rename_i k ihc
      cases ihw
      rename_i n ihw
      exists k + n
      constructor
      apply Œ≥.ife_tt_Œ≥
      . assumption
      . apply Œ≥.cat_k_iff
        . assumption
        . assumption
    }
    | wle_ff_Œµ => {
      exists 0
      constructor
      apply Œ≥.ife_ff_Œ≥
      . assumption
      . constructor
    }
  }


-- theorem ‚ÑÇ.Œµ_iff_œÅ : Œµ c s s‚ÇÅ ‚Üî s‚ÇÅ ‚àà œÅ c s :=
--   by
--     constructor
--     . {
--       intro h
--       induction h with
--       | skip => simp
--       | ass => simp
--       | cat s‚ÇÇ _ _ ih‚ÇÅ ih‚ÇÇ => simp; exists s‚ÇÇ
--       | ife_tt hb _ ih =>
--         unfold œÅ
--         rw [hb]
--         assumption
--       | ife_ff hb _ ih =>
--         unfold œÅ
--         rw [hb]
--         assumption
--       | wle_tt s‚ÇÇ hb _ _ ih‚ÇÅ ih‚ÇÇ =>
--         rw [wle_unfoldd]
--         unfold œÅ
--         rw [hb]
--         simp
--         exists s‚ÇÇ
--       | wle_ff hb =>
--         rw [wle_unfoldd]
--         unfold œÅ
--         rw [hb]
--         simp
--     }
--     . {
--       intro h
--       revert s s‚ÇÅ
--       induction c with
--       | skip => simp; intro _; constructor
--       | ass => simp; intro _; constructor
--       | cat c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
--         intro s s‚ÇÅ h
--         simp at h
--         cases h with | intro s‚ÇÇ hh =>
--           constructor
--           . apply ih‚ÇÅ; apply hh.left
--           . apply ih‚ÇÇ; apply hh.right

--       | ife b c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
--         intro s s‚ÇÅ h
--         cases hh: ùîπ.œÅ b s
--         . apply ‚ÑÇ.Œµ.ife_ff
--           . assumption
--           . unfold œÅ at h; rw [hh] at h; simp at h; apply ih‚ÇÇ; assumption
--         . apply ‚ÑÇ.Œµ.ife_tt
--           . assumption
--           . unfold œÅ at h; rw [hh] at h; simp at h; apply ih‚ÇÅ; assumption

--       | wle b c ih => {
--         intro s s‚ÇÅ h
--         cases hb: ùîπ.œÅ b s
--         . rw [‚ÑÇ.wle_unfoldd] at h
--           unfold œÅ at h
--           rw [hb] at h
--           simp at h
--           rw [h]
--           apply ‚ÑÇ.Œµ.wle_ff
--           assumption
--         . {
--           rw [‚ÑÇ.wle_unfold, ‚ÑÇ.ife_unfold_ext]

--           unfold œÅ at h
--           rw [hb] at h
--           simp at h
--           cases h
--           rename_i s‚ÇÇ h

--         }
--       }
--     }
