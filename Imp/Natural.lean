import Imp.State
import Imp.Aexp
import Imp.Bexp
import Imp.Syntax

-- Semantics of commands.
inductive ‚ÑÇ.Œµ: ‚ÑÇ ‚Üí ùïä ‚Üí ùïä ‚Üí Prop
  | skip‚ÇÅ:
    Œµ skip s s

  | ass‚ÇÅ:
    Œµ (x ‚âî a) s (s‚ü¶x‚Ü¶a.œÅ s‚üß)

  | cat‚ÇÅ (hc: c.Œµ s t) (hd: d.Œµ t u):
    Œµ (c;;d) s u

  | ife‚ÇÅ (hb: b.œÅ s) (hc: c.Œµ s t):
    Œµ (ife b c d) s t

  | ife‚ÇÇ (hb: b.œÅ s = false) (hd: d.Œµ s t):
    Œµ (ife b c d) s t

  | wle‚ÇÅ (hb: b.œÅ s) (hc: c.Œµ s u) (hw: (wle b c).Œµ u t):
    Œµ (wle b c) s t

  | wle‚ÇÇ (hb: b.œÅ s = false):
    Œµ (wle b c) s s

theorem ‚ÑÇ.Œµ.demo‚ÇÅ: ‚ü™x ‚âî 5‚ü´.Œµ ‚ü¶‚üß ‚ü¶"x"‚Ü¶5‚üß := ass‚ÇÅ

theorem ‚ÑÇ.Œµ.demo‚ÇÇ:
  Œµ ‚ü™x ‚âî 2; if x ‚â§ 1 {y ‚âî 3} else {z ‚âî 4}‚ü´ ‚ü¶‚üß
  (‚ü¶"x"‚Ü¶2‚üß‚ü¶"z"‚Ü¶4‚üß) := cat‚ÇÅ ass‚ÇÅ (ife‚ÇÇ rfl ass‚ÇÅ)

theorem ‚ÑÇ.Œµ.skip_same: Œµ skip s s‚ÇÅ ‚Üî s = s‚ÇÅ :=
  ‚ü®by intro h; cases h; rfl, (¬∑ ‚ñ∏ skip‚ÇÅ)‚ü©

instance ‚ÑÇ.Œµ.equiv: Setoid ‚ÑÇ where
  r c d := ‚àÄ s t, Œµ c s t ‚Üî Œµ d s t
  iseqv := {
    refl := by simp
    symm := by {
      intro _ _ h _ _
      apply Iff.symm
      apply h
    }
    trans := by {
      intro _ _ _ h‚ÇÅ h‚ÇÇ x _
      specialize h‚ÇÅ x
      specialize h‚ÇÇ x
      rw [h‚ÇÅ, h‚ÇÇ]
      simp
    }
  }

theorem ‚ÑÇ.Œµ.skipl: (skip;;c) ‚âà c := by
  intro _ _
  constructor
  . intro h; cases h with | cat‚ÇÅ hc hd =>
    exact skip_same.mp hc ‚ñ∏ hd
  . exact (cat‚ÇÅ skip‚ÇÅ ¬∑)

theorem ‚ÑÇ.Œµ.skipr: (c;;skip) ‚âà c := by
  intro _ _
  constructor
  . intro h; cases h with | cat‚ÇÅ hc hd =>
    exact skip_same.mp hd ‚ñ∏ hc
  . exact (cat‚ÇÅ ¬∑ skip‚ÇÅ)

theorem ‚ÑÇ.Œµ.ife_tt (h: b ‚âà ùîπ.tt): ife b c d ‚âà c := by
  intro _ _; constructor <;> intro h‚ÇÅ
  . cases h‚ÇÅ with
    | ife‚ÇÅ => assumption
    | ife‚ÇÇ hb => rw [h] at hb; contradiction
  . apply Œµ.ife‚ÇÅ _ h‚ÇÅ
    . apply h

theorem ‚ÑÇ.Œµ.ife_ff (h: b ‚âà ùîπ.ff): ife b c d ‚âà d := by
  intro _ _; constructor <;> intro h‚ÇÅ
  . cases h‚ÇÅ with
    | ife‚ÇÇ => assumption
    | ife‚ÇÅ hb => rw [h] at hb; contradiction
  . apply Œµ.ife‚ÇÇ _ h‚ÇÅ
    . apply h

theorem ‚ÑÇ.Œµ.wle_unfold:
  wle b c ‚âà ife b (c;;wle b c) skip := by
  intro s t
  constructor <;> intro h
  . cases hb: b.œÅ s
    . apply ife‚ÇÇ hb
      cases h
      . rw [hb] at *; contradiction
      . constructor
    . apply ife‚ÇÅ hb
      cases h
      . constructor <;> assumption
      . rw [hb] at *; contradiction
  . cases hb: b.œÅ s
    . cases h
      . rw [hb] at *; contradiction
      . rename_i hd; cases hd; apply wle‚ÇÇ; assumption
    . cases h
      . rename_i hc; cases hc; constructor <;> assumption
      . rw [hb] at *; contradiction

theorem ‚ÑÇ.Œµ.ife_ext: (ife b c d).Œµ s t ‚Üî cond (b.œÅ s) (c.Œµ s t) (d.Œµ s t) := by
  constructor <;> intro h <;> cases hb: b.œÅ s <;> simp at *
  . cases h
    simp [hb] at *
    assumption
  . cases h
    assumption
    simp [hb] at *
  . rw [hb] at h
    exact ife‚ÇÇ hb h
  . rw [hb] at h
    exact ife‚ÇÅ hb h

theorem ‚ÑÇ.Œµ.ife_ext': (ife b c d).Œµ s t ‚Üî Œµ (cond (b.œÅ s) c d) s t := by
  constructor <;> intro h <;> cases hb: b.œÅ s <;> simp at *
  . cases h
    simp [hb] at *
    assumption
  . cases h
    assumption
    simp [hb] at *
  . rw [hb] at h
    exact ife‚ÇÇ hb h
  . rw [hb] at h
    exact ife‚ÇÅ hb h

theorem ‚ÑÇ.Œµ.wle_tt (heqb: b ‚âà ùîπ.tt):
  ¬¨(Œµ (wle b c) s t) := by
  intro h
  generalize heqw: wle b c = w at h
  induction h with
  | wle‚ÇÅ _ _ _ _ ih‚ÇÇ => exact ih‚ÇÇ heqw
  | wle‚ÇÇ hb => cases heqw; rw [heqb] at hb; contradiction
  | _ => contradiction

theorem ‚ÑÇ.Œµ.determ (h‚ÇÅ: Œµ c s t) (h‚ÇÇ: Œµ c s u): t = u :=
  by induction h‚ÇÅ generalizing u with
  | cat‚ÇÅ _ _ ih‚ÇÅ ih‚ÇÇ => cases h‚ÇÇ with
    | cat‚ÇÅ hc hd => exact ih‚ÇÇ (ih‚ÇÅ hc ‚ñ∏ hd)

  | ife‚ÇÅ hb _ ih => cases h‚ÇÇ with
    | ife‚ÇÅ _ hd   => exact ih hd
    | ife‚ÇÇ hb‚ÇÅ hd => simp [hb] at hb‚ÇÅ

  | ife‚ÇÇ hb _ ih => cases h‚ÇÇ with
    | ife‚ÇÅ hb‚ÇÅ hd => simp [hb] at hb‚ÇÅ
    | ife‚ÇÇ _ hd   => exact ih hd

  | wle‚ÇÅ hb _ _ ih‚ÇÅ ih‚ÇÇ => cases h‚ÇÇ with
    | wle‚ÇÅ _ hc hw => exact ih‚ÇÇ (ih‚ÇÅ hc ‚ñ∏ hw)
    | wle‚ÇÇ hb‚ÇÅ     => simp [hb] at hb‚ÇÅ

  | wle‚ÇÇ hb => cases h‚ÇÇ with
    | wle‚ÇÅ hb‚ÇÅ => simp [hb] at hb‚ÇÅ
    | wle‚ÇÇ     => rfl

  | _ => cases h‚ÇÇ; rfl
