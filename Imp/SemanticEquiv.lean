
theorem ‚ÑÇ.Œµ_iff_œÅ : Œµ c s s‚ÇÅ ‚Üî s‚ÇÅ ‚àà œÅ c s :=
  by
    constructor
    . {
      intro h
      induction h with
      | skip => simp
      | ass => simp
      | cat s‚ÇÇ _ _ ih‚ÇÅ ih‚ÇÇ => simp; exists s‚ÇÇ
      | ife_tt hb _ ih =>
        unfold œÅ
        rw [hb]
        assumption
      | ife_ff hb _ ih =>
        unfold œÅ
        rw [hb]
        assumption
      | wle_tt s‚ÇÇ hb _ _ ih‚ÇÅ ih‚ÇÇ =>
        rw [wle_unfoldd]
        unfold œÅ
        rw [hb]
        simp
        exists s‚ÇÇ
      | wle_ff hb =>
        rw [wle_unfoldd]
        unfold œÅ
        rw [hb]
        simp
    }
    . {
      intro h
      revert s s‚ÇÅ
      induction c with
      | skip => simp; intro _; constructor
      | ass => simp; intro _; constructor
      | cat c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
        intro s s‚ÇÅ h
        simp at h
        cases h with | intro s‚ÇÇ hh =>
          constructor
          . apply ih‚ÇÅ; apply hh.left
          . apply ih‚ÇÇ; apply hh.right

      | ife b c‚ÇÅ c‚ÇÇ ih‚ÇÅ ih‚ÇÇ =>
        intro s s‚ÇÅ h
        cases hh: ùîπ.œÅ b s
        . apply ‚ÑÇ.Œµ.ife_ff
          . assumption
          . unfold œÅ at h; rw [hh] at h; simp at h; apply ih‚ÇÇ; assumption
        . apply ‚ÑÇ.Œµ.ife_tt
          . assumption
          . unfold œÅ at h; rw [hh] at h; simp at h; apply ih‚ÇÅ; assumption

      | wle b c ih => {
        intro s s‚ÇÅ h
        cases hb: ùîπ.œÅ b s
        . rw [‚ÑÇ.wle_unfoldd] at h
          unfold œÅ at h
          rw [hb] at h
          simp at h
          rw [h]
          apply ‚ÑÇ.Œµ.wle_ff
          assumption
        . {
          rw [‚ÑÇ.wle_unfold, ‚ÑÇ.ife_unfold_ext]

          unfold œÅ at h
          rw [hb] at h
          simp at h
          cases h
          rename_i s‚ÇÇ h

        }
      }
    }
