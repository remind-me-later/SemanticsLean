import Imp.State
import Imp.Aexp
import Imp.Bexp
import Imp.Syntax

inductive ‚ÑÇ.Œ≥: ‚ÑÇ √ó ùïä √ó Nat ‚Üí ‚ÑÇ √ó ùïä √ó Nat ‚Üí Prop
  | skip_Œ≥:
    Œ≥ (skip, s, n) (skip, s, n - 1)

  | ass_Œ≥:
    Œ≥ (x ‚âî‚Çõ a, s, n) (skip, s‚ü¶x‚Ü¶a.œÅ s‚üß, n - 1)

  | cat_Œ≥ (h: Œ≥ (c‚ÇÅ, s, n) (c‚ÇÅ', s‚ÇÅ, k)):
    Œ≥ (c‚ÇÅ;;c‚ÇÇ, s, n) (c‚ÇÅ';;c‚ÇÇ, s‚ÇÅ, k)

  | cat_skip_Œ≥ (h: Œ≥ (c‚ÇÅ, s, n) (skip, s‚ÇÅ, k)):
    Œ≥ (c‚ÇÅ;;c‚ÇÇ, s, n) (c‚ÇÇ, s‚ÇÅ, k)

  | ife_Œ≥:
    Œ≥ (ife b c‚ÇÅ c‚ÇÇ, s, n) (cond (ùîπ.œÅ b s) (c‚ÇÅ, s, n - 1) (c‚ÇÇ, s, n - 1))

  | wle_Œ≥:
    Œ≥ (wle b c, s, n) (ife b (c;;wle b c) skip, s, n - 1)

example: ‚ÑÇ.Œ≥ (‚ü™x ‚âî 2; while 0 ‚â§ x {x‚âîx-1}‚ü´, ‚ü¶‚üß, 1) (‚ü™while 0 ‚â§ x {x‚âîx-1}‚ü´, ‚ü¶"x"‚Ü¶2‚üß, 0) :=
  by repeat constructor

theorem ‚ÑÇ.Œ≥.cat_k_if_n_m
  (hcat: Œ≥ (c‚ÇÅ;;c‚ÇÇ, s, k) (skip, s‚ÇÇ, 0)):
  ‚àÉk‚ÇÅ k‚ÇÇ s‚ÇÅ,
    Œ≥ (c‚ÇÅ, s, k‚ÇÅ) (skip, s‚ÇÅ, 0)
    ‚àß Œ≥ (c‚ÇÇ, s‚ÇÅ, k‚ÇÇ) (skip, s‚ÇÇ, 0)
    ‚àß k‚ÇÅ + k‚ÇÇ = k :=
  by {
    cases hcat
    rename_i h
    exists k
    exists 0
    exists s‚ÇÇ
    constructor
    . assumption
    . constructor
      . constructor
      . rfl
  }

theorem ‚ÑÇ.Œ≥.cat_no_influence (hcat: Œ≥ (c‚ÇÅ, s, k) (skip, s‚ÇÅ, 0)):
  Œ≥ (c‚ÇÅ;;c‚ÇÇ, s, k) (c‚ÇÇ, s‚ÇÅ, 0) :=
  by constructor; assumption
