import Imp.State
import Imp.Aexp
import Imp.Bexp
import Imp.Syntax

import Std.Data.List.Basic
import Mathlib.Data.List.Chain

@[simp, reducible] def ‚ÑÇ.Œ≥ (c: ‚ÑÇ) (s: ùïä): (Option ‚ÑÇ) √ó ùïä :=
  match c with
  | skip        => (none, s)
  | x ‚âî‚Çõ a      => (skip, s‚ü¶x ‚Ü¶ (ùî∏.œÅ a s)‚üß)
  | c‚ÇÅ;;c‚ÇÇ      =>
    let (c‚ÇÅ', s‚ÇÅ) := c‚ÇÅ.Œ≥ s
    if let some c‚ÇÅ' := c‚ÇÅ' then (c‚ÇÅ';;c‚ÇÇ, s‚ÇÅ) else (c‚ÇÇ, s‚ÇÅ)
  | ife b c‚ÇÅ c‚ÇÇ => ite (ùîπ.œÅ b s) (c‚ÇÅ, s) (c‚ÇÇ, s)
  | wle b c     => (ife b (c;;wle b c) skip, s)

def ex_program := ‚ü™y ‚âî 1; while ¬¨(x = 1) {y ‚âî y * x; x ‚âî x + 1}‚ü´

def ‚ÑÇ.Œ≥.sequence (x: ‚ÑÇ √ó ùïä) (k: Nat): (Option ‚ÑÇ) √ó ùïä :=
  if k > 0 then
    let (c, s) := (Œ≥ x.1 x.2)
    if let some c‚ÇÅ := c then
      sequence (c‚ÇÅ, s) (k - 1)
    else (c, s)
  else (x.1, x.2)

@[simp] def ‚ÑÇ.Œ≥.deriv_k (p: ‚ÑÇ √ó ùïä) (p‚ÇÅ: ‚ÑÇ √ó ùïä) (k: Nat) :=
  sequence p k = (some p‚ÇÅ.1, p‚ÇÅ.2)

@[simp] def ‚ÑÇ.Œ≥.deriv_star (p: ‚ÑÇ √ó ùïä) (p‚ÇÅ: ‚ÑÇ √ó ùïä) :=
  ‚àÉk, deriv_k p p‚ÇÅ k

@[simp] def ‚ÑÇ.Œ≥.deriv_term (p: ‚ÑÇ √ó ùïä) :=
  ‚àÉs, deriv_star p (‚ÑÇ.skip, s)

#simp ‚ÑÇ.Œ≥.sequence (ex_program, ‚ü¶‚üß) 10

example: ‚ÑÇ.Œ≥.deriv_term (ex_program, ‚ü¶‚üß) :=
  by
    simp
    exists ‚ü¶"y" ‚Ü¶ 1‚üß‚ü¶"y" ‚Ü¶ 0‚üß‚ü¶"x" ‚Ü¶ 1‚üß
    exists 10

theorem ‚ÑÇ.Œ≥.cat_k_if_n_m (hcat: deriv_k (c‚ÇÅ;;c‚ÇÇ, s) (skip, s‚ÇÇ) k):
  ‚àÉk‚ÇÅ k‚ÇÇ,  deriv_k (c‚ÇÅ, s) (skip, s‚ÇÅ) k‚ÇÅ ‚Üí deriv_k (c‚ÇÇ, s‚ÇÅ) (skip, s‚ÇÇ) k‚ÇÇ ‚Üí
  k‚ÇÅ + k‚ÇÇ = k :=
  by {
    induction k with
    | zero => {
      exists 0
      exists 0
      intro _ _
      rfl
    }
    | succ n ih => {
      cases ih
    }
  }

theorem ‚ÑÇ.Œ≥.cat_no_influence (hcat: deriv_star (c‚ÇÅ, s) (‚ÑÇ.skip, s‚ÇÅ)):
  deriv_star (c‚ÇÅ;;c‚ÇÇ, s) (c‚ÇÇ, s‚ÇÅ) :=
  by {
    unfold deriv_star at *
    cases hcat
    rename_i k hcat
    exists k+1
    simp
    unfold deriv_k at hcat
    unfold sequence
    simp
    induction k
    . {
      unfold sequence at *
      simp at *
      cases hcat
      rename_i l r
      cases r
      cases l
      reduce
      rfl
    }
    . {
      sorry
    }
  }
