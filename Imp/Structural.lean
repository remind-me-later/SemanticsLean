import Imp.State
import Imp.Aexp
import Imp.Bexp
import Imp.Syntax

import Mathlib.Logic.Relation

@[reducible]
inductive ‚ÑÇ.Œ≥: ‚ÑÇ √ó ùïä ‚Üí ‚ÑÇ √ó ùïä ‚Üí Prop
  | ass‚ÇÅ:
    Œ≥ (x ‚âî a, s) (skip, s‚ü¶x‚Ü¶a.œÅ s‚üß)

  | cat‚ÇÅ:
    Œ≥ (skip;;c, s) (c, s)

  | cat‚ÇÇ (h: Œ≥ (c, s) (e, t)):
    Œ≥ (c;;d, s) (e;;d, t)

  | ife‚ÇÅ (hb: b.œÅ s):
    Œ≥ (ife b c d, s) (c, s)

  | ife‚ÇÇ (hb: b.œÅ s = false):
    Œ≥ (ife b c d, s) (d, s)

  | wle‚ÇÅ:
    Œ≥ (wle b c, s) (ife b (c;;wle b c) skip, s)

example:
  ‚ÑÇ.Œ≥ (‚ü™x ‚âî 2; while 0 ‚â§ x {x‚âîx-1}‚ü´, ‚ü¶‚üß)
      (‚ü™skip; while 0 ‚â§ x {x‚âîx-1}‚ü´, ‚ü¶"x"‚Ü¶2‚üß) :=
  by
    repeat constructor

def ‚ÑÇ.œÑ := Relation.ReflTransGen Œ≥

example:
  ‚ÑÇ.œÑ (‚ü™x ‚âî 2; while 0 ‚â§ x {x‚âîx-1}‚ü´, ‚ü¶‚üß)
      (‚ü™while 0 ‚â§ x {x‚âîx-1}‚ü´, (‚ü¶"x"‚Ü¶2‚üß)) :=
  by
    apply Relation.ReflTransGen.head
    constructor
    constructor
    apply Relation.ReflTransGen.head
    constructor
    apply Relation.ReflTransGen.refl

theorem ‚ÑÇ.œÑ.cat_skip_cat
  (h: œÑ (c‚ÇÅ, s) (skip, s‚ÇÅ)):
  œÑ (c‚ÇÅ;;c‚ÇÇ, s) (skip;;c‚ÇÇ, s‚ÇÅ) :=
  by {
    apply Relation.ReflTransGen.lift (fun x => (x.fst;;c‚ÇÇ, x.snd)) _ h
    intro a b h
    cases a
    cases b
    constructor
    assumption
  }

theorem ‚ÑÇ.œÑ.cat
  s‚ÇÅ
  (h‚ÇÅ: œÑ (c‚ÇÅ, s) (skip, s‚ÇÅ))
  (h‚ÇÇ: œÑ (c‚ÇÇ, s‚ÇÅ) (skip, s‚ÇÇ)):
  œÑ (c‚ÇÅ;;c‚ÇÇ, s) (skip, s‚ÇÇ) :=
  by {
    apply Relation.ReflTransGen.trans
    . apply cat_skip_cat h‚ÇÅ
    . apply Relation.ReflTransGen.trans _ h‚ÇÇ
      apply Relation.ReflTransGen.single
      constructor
  }

theorem ‚ÑÇ.œÑ.cat_no_influence
  (h: œÑ (c‚ÇÅ, s) (skip, s‚ÇÅ)):
  œÑ (c‚ÇÅ;;c‚ÇÇ, s) (c‚ÇÇ, s‚ÇÅ) :=
  by
    apply Relation.ReflTransGen.trans
    . apply cat_skip_cat h
    . apply Relation.ReflTransGen.single
      constructor

theorem ‚ÑÇ.œÑ.catex
  (h: œÑ (c‚ÇÅ;;c‚ÇÇ, s) (skip, s‚ÇÇ)):
  ‚àÉs‚ÇÅ, œÑ (c‚ÇÅ, s) (skip, s‚ÇÅ) ‚àß œÑ (c‚ÇÇ, s‚ÇÅ) (skip, s‚ÇÇ) :=
  by {
    have hh := Relation.ReflTransGen.lift (fun x => (x.fst;;c‚ÇÇ, x.snd)) _ h


  }



-- instance ‚ÑÇ.œÑ.equiv: Setoid ‚ÑÇ where
--   r c d := ‚àÄ s t, œÑ (c, s) (skip, t) ‚Üî œÑ (d, s) (skip, t)
--   iseqv := {
--     refl := by simp
--     symm := by {
--       intro _ _ h _ _
--       apply Iff.symm
--       apply h
--     }
--     trans := by {
--       intro _ _ _ h‚ÇÅ h‚ÇÇ x _
--       specialize h‚ÇÅ x
--       specialize h‚ÇÇ x
--       rw [h‚ÇÅ, h‚ÇÇ]
--     }
--   }


-- theorem ‚ÑÇ.œÑ.skipl: c ‚âà (skip;;c) :=
--   by {
--       intro s t
--       constructor
--       . intro h
--         apply Relation.ReflTransGen.trans
--         . apply Relation.ReflTransGen.single
--           constructor
--         . assumption
--       . intro h
--         induction h
--         cases h
--         rename_i h‚ÇÅ h‚ÇÇ
--         cases h‚ÇÅ
--         . assumption
--         . rename_i h h‚ÇÅ
--           cases h
--           cases h‚ÇÅ

--   }


-- theorem ‚ÑÇ.œÑ.skipr: c ‚âà (c;;skip) :=
--   by {
--     intro s t
--     constructor
--     . intro h
--       apply cat t
--       . assumption
--       . constructor
--     . intro h
--       have hh := catex h
--       cases hh
--       rename_i w h
--       cases h
--       rename_i left right
--       cases right
--       . assumption
--       . rename_i h‚ÇÅ h‚ÇÇ
--         cases h‚ÇÅ
--   }
