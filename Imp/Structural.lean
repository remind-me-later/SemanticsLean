import Imp.State
import Imp.Aexp
import Imp.Bexp
import Imp.Syntax

import Mathlib.Logic.Relation

inductive ‚ÑÇ.Step: ‚ÑÇ √ó ùïä ‚Üí ‚ÑÇ √ó ùïä ‚Üí Prop
  | ass‚ÇÅ:
    Step (x ‚âî a, s) (skip, s‚ü¶x‚Ü¶a‚Üìs‚üß)

  | cat‚ÇÅ:
    Step (skip;;c, s) (c, s)

  | cat‚ÇÇ (h: Step (c, s) (e, t)):
    Step (c;;d, s) (e;;d, t)

  | ife‚ÇÅ:
    Step (ife b c d, s) (cond (b‚Üìs) (c, s) (d, s))

  | wle‚ÇÅ:
    Step (wle b c, s) (ife b (c;;wle b c) skip, s)

infix:110 " ‚áí " => ‚ÑÇ.Step

theorem ‚ÑÇ.Step.demo‚ÇÅ:
  (‚¶Éx ‚âî 2; while 0 ‚â§ x {x‚âîx-1}‚¶Ñ, ‚ü¶‚üß) ‚áí
      (‚¶Éskip; while 0 ‚â§ x {x‚âîx-1}‚¶Ñ, ‚ü¶"x"‚Ü¶2‚üß) := cat‚ÇÇ ass‚ÇÅ

@[simp] theorem ‚ÑÇ.Step.cat_iff:
  (c‚ÇÅ;;c‚ÇÇ, s) ‚áí et ‚Üî
  (‚àÉe t, (c‚ÇÅ, s) ‚áí (e, t) ‚àß et = (e;;c‚ÇÇ, t))
  ‚à® (c‚ÇÅ = skip ‚àß et = (c‚ÇÇ, s)) :=
  by
  constructor <;> intro h
  . cases h with
    | cat‚ÇÅ => exact Or.inr ‚ü®rfl, rfl‚ü©
    | cat‚ÇÇ h => exact Or.inl ‚ü®_, ‚ü®_, ‚ü®h, rfl‚ü©‚ü©‚ü©
  . cases h with
    | inl h =>
      cases h with | intro e h =>
        cases h with | intro t h =>
          exact h.right ‚ñ∏ cat‚ÇÇ h.left
    | inr h =>
      cases h with | intro h‚ÇÅ h‚ÇÇ =>
        exact h‚ÇÅ ‚ñ∏ h‚ÇÇ ‚ñ∏ Step.cat‚ÇÅ

@[simp] lemma ‚ÑÇ.Step.ite_iff:
  (ife b c d, s) ‚áí ss ‚Üî
  (b‚Üìs ‚àß ss = (c, s)) ‚à® (b‚Üìs = false ‚àß ss = (d, s)) :=
  by
  constructor <;> intro h
  . cases hb: b‚Üìs <;> cases h
    . exact Or.inr (And.intro rfl (hb ‚ñ∏ rfl))
    . exact Or.inl (And.intro rfl (hb ‚ñ∏ rfl))
  . have hss: ss = cond (b‚Üìs) (c,s) (d,s) := by
      cases hb: b‚Üìs <;> rw [hb] at h <;> simp at * <;> assumption
    exact hss ‚ñ∏ ife‚ÇÅ

open Relation

infix:110 " ‚áí* " => ReflTransGen ‚ÑÇ.Step

theorem ‚ÑÇ.Star.demo‚ÇÇ:
  (‚¶É x ‚âî 2; while 0 ‚â§ x {x‚âîx-1}‚¶Ñ, ‚ü¶‚üß) ‚áí*
      (‚¶Éwhile 0 ‚â§ x {x‚âîx-1}‚¶Ñ, (‚ü¶"x"‚Ü¶2‚üß)) :=
  ReflTransGen.head (Step.cat‚ÇÇ Step.ass‚ÇÅ) (ReflTransGen.head Step.cat‚ÇÅ ReflTransGen.refl)

theorem ‚ÑÇ.Star.cat_skip_cat
  (h: (c, s) ‚áí* (skip, t)):
  (c;;d, s) ‚áí* (skip;;d, t) :=
  ReflTransGen.lift (Œª x ‚Ü¶ (Prod.fst x;;d, Prod.snd x)) (Œª _ _ h => Step.cat‚ÇÇ h) h

theorem ‚ÑÇ.Star.cat
  (h‚ÇÅ: (c‚ÇÅ, s) ‚áí* (skip, s‚ÇÅ))
  (h‚ÇÇ: (c‚ÇÇ, s‚ÇÅ) ‚áí* (skip, s‚ÇÇ)):
  (c‚ÇÅ;;c‚ÇÇ, s) ‚áí* (skip, s‚ÇÇ) :=
  by
  apply ReflTransGen.trans (cat_skip_cat h‚ÇÅ)
  exact ReflTransGen.trans (ReflTransGen.single Step.cat‚ÇÅ) h‚ÇÇ

theorem ‚ÑÇ.Star.cat_no_influence
  (h: (c‚ÇÅ, s) ‚áí* (skip, s‚ÇÅ)):
  (c‚ÇÅ;;c‚ÇÇ, s) ‚áí* (c‚ÇÇ, s‚ÇÅ) :=
  ReflTransGen.trans (cat_skip_cat h) (ReflTransGen.single Step.cat‚ÇÅ)
