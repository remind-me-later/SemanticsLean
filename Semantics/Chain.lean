import Semantics.Set
import Semantics.Lattice

def Chain {Œ±: Type} (s: Nat ‚Üí Set Œ±): Prop :=
  ‚àÄi, s i ‚äÜ s (i + 1)

structure œâChain (Œ±: Type) where
  toSeq: Nat ‚Üí Set Œ±
  chain': Chain toSeq

def œâContinuous {Œ± Œ≤: Type} (f: Set Œ± ‚Üí Set Œ≤): Prop :=
  ‚àÄs, Chain s ‚Üí f (‚ãÉ i, s i) = ‚ãÉ i, f (s i)

theorem œâContinuous.isMono (f: Set Œ± ‚Üí Set Œ≤) (h: œâContinuous f):
  Monotone f := by
  intro a b hab _ hx

  have hchain: Chain (fun i => if i = 0 then a else b) := fun i x =>
    match i with | .zero => (hab .) | .succ j => (.)
  have hset: (‚ãÉ i, if i = 0 then a else b) = b := Set.ext fun _ => {
      mp := fun ‚ü®i, hi‚ü© => match i with | .zero => hab hi | .succ _ => hi,
      mpr := (‚ü®1, .‚ü©)
    }
  have hset': (‚ãÉ i, f (if i = 0 then a else b)) = (f a ‚à™ f b) :=
    Set.ext fun _ => {
      mp := fun ‚ü®i, hi‚ü© => match i with
        | .zero => Or.inl hi
        | .succ _ => Or.inr hi,
      mpr := fun hx => match hx with
        | .inl hx => ‚ü®0, hx‚ü©
        | .inr hx => ‚ü®1, hx‚ü©
    }
  have hh := hset ‚ñ∏ hset' ‚ñ∏ (h _ hchain)

  exact hh ‚ñ∏ Or.inl hx

structure œâContinuousHom (Œ± Œ≤: Type) extends Set Œ± ‚Üío Set Œ≤ where
  continuous': œâContinuous toFun
  monotone' := œâContinuous.isMono toFun continuous'

infixr:25 " ‚ÜíùíÑ " => œâContinuousHom

instance œâContinuousHom.coerceFun {Œ± Œ≤: Type}:
  CoeFun (Œ± ‚ÜíùíÑ Œ≤) (fun _ => Set Œ± ‚Üí Set Œ≤) := ‚ü®fun f => f.toFun‚ü©

def fpow {Œ±: Type} (f: Œ± ‚Üí Œ±) (n: Nat): Œ± ‚Üí Œ±
  | a => match n with
    | .zero => a
    | .succ n => f (fpow f n a)

theorem fexp_succ (f: Œ± ‚Üí Œ±) (x: Œ±): (fpow f (n + 1)) x = f (fpow f n x) := by
  induction n <;> rfl

theorem fexp_chain (f: Set Œ± ‚Üío Set Œ±): Chain (fun i => fpow f i ‚àÖ) := by {
  intro i
  simp at *
  induction i with
  | zero =>
    unfold fpow
    simp [Membership.mem, Set.Mem, EmptyCollection.emptyCollection]
    intro x hx
    contradiction
  | succ i ih =>
    unfold fpow
    simp at *
    exact f.monotone' _ _ ih
}

instance (f: Set Œ± ‚Üío Set Œ±): œâChain Œ± where
  toSeq := fun i => fpow f i ‚àÖ
  chain' := fexp_chain f

def œâContinuousHom.lfp (f: Œ± ‚ÜíùíÑ Œ±): Set Œ± := ‚ãÉ i, fpow f i ‚àÖ

theorem kleene_fix {f: Œ± ‚ÜíùíÑ Œ±}:
  f.toOrderHom.lfp = f.lfp := by {
  apply Subset.antisymm
  . suffices f.toOrderHom.pfp (‚ãÉ i, (fpow f i) ‚àÖ) by exact OrderHom.lfp_le this

    intro a ha

    have h := f.continuous' _ (fexp_chain f.toOrderHom)
    simp [‚Üêfexp_succ f ‚àÖ] at h

    have hh: (Set.iUnion fun i => fpow f (i + 1) ‚àÖ) = (Set.iUnion fun i => fpow f i ‚àÖ) := Set.ext fun x => {
      mp := fun ‚ü®i, hi‚ü© => match i with
        | .zero => ‚ü®1, hi‚ü©
        | .succ i => ‚ü®i+1+1, hi‚ü©,
      mpr := fun ‚ü®i, hi‚ü© => match i with
        | .zero => by contradiction
        | .succ i => ‚ü®i, hi‚ü©
    }

    rw [hh] at h
    rw [h] at ha

    exact ha

  . intro a ‚ü®i, ha‚ü©
    revert a ha
    rw [‚ÜêSet.Subset]
    simp at *
    induction i with
    | zero =>
      unfold fpow
      simp
      intro a ha
      contradiction
    | succ i ih =>
      have hmono := f.monotone' _ _ ih
      rw [‚Üêfexp_succ f ‚àÖ] at hmono
      rw [f.toOrderHom.lfp_eq]
      exact hmono
}
